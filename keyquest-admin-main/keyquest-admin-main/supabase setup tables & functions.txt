-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.admin_audit_log (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  action character varying NOT NULL,
  details jsonb,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT admin_audit_log_pkey PRIMARY KEY (id),
  CONSTRAINT admin_audit_log_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.admin_users(id)
);
CREATE TABLE public.admin_users (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  email character varying NOT NULL UNIQUE,
  name character varying NOT NULL,
  role character varying NOT NULL CHECK (role::text = ANY (ARRAY['super_admin'::character varying, 'admin'::character varying, 'editor'::character varying]::text[])),
  password_hash text NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  last_login timestamp with time zone,
  is_active boolean DEFAULT true,
  failed_login_attempts integer DEFAULT 0,
  locked_until timestamp with time zone,
  CONSTRAINT admin_users_pkey PRIMARY KEY (id)
);
CREATE TABLE public.agents (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL,
  email character varying NOT NULL UNIQUE,
  status character varying DEFAULT 'Active'::character varying CHECK (status::text = ANY (ARRAY['Active'::character varying, 'Inactive'::character varying]::text[])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT agents_pkey PRIMARY KEY (id)
);
CREATE TABLE public.bankers (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL,
  email character varying NOT NULL UNIQUE,
  bank_access ARRAY,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT bankers_pkey PRIMARY KEY (id)
);
CREATE TABLE public.banks (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL UNIQUE,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT banks_pkey PRIMARY KEY (id)
);
CREATE TABLE public.enquiries (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  customer_name character varying NOT NULL,
  email character varying NOT NULL,
  phone character varying,
  property_type character varying,
  loan_amount bigint,
  preferred_bank character varying,
  message text,
  status character varying DEFAULT 'New'::character varying CHECK (status::text = ANY (ARRAY['New'::character varying, 'In Progress'::character varying, 'Completed'::character varying, 'Closed'::character varying]::text[])),
  assigned_agent_id uuid,
  assigned_agent_name character varying,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT enquiries_pkey PRIMARY KEY (id)
);
CREATE TABLE public.rate_packages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  bank_id uuid,
  bank_name character varying,
  loan_type character varying,
  property_type character varying,
  property_status character varying,
  rate_type_category character varying CHECK (rate_type_category::text = ANY (ARRAY['Fixed'::character varying, 'Floating'::character varying]::text[])),
  lock_period text,
  year1_rate_type character varying,
  year1_operator character varying CHECK (year1_operator::text = ANY (ARRAY['+'::character varying, '-'::character varying]::text[])),
  year1_value numeric,
  year2_rate_type character varying,
  year2_operator character varying CHECK (year2_operator::text = ANY (ARRAY['+'::character varying, '-'::character varying]::text[])),
  year2_value numeric,
  year3_rate_type character varying,
  year3_operator character varying CHECK (year3_operator::text = ANY (ARRAY['+'::character varying, '-'::character varying]::text[])),
  year3_value numeric,
  year4_rate_type character varying,
  year4_operator character varying CHECK (year4_operator::text = ANY (ARRAY['+'::character varying, '-'::character varying]::text[])),
  year4_value numeric,
  year5_rate_type character varying,
  year5_operator character varying CHECK (year5_operator::text = ANY (ARRAY['+'::character varying, '-'::character varying]::text[])),
  year5_value numeric,
  thereafter_rate_type character varying,
  thereafter_operator character varying CHECK (thereafter_operator::text = ANY (ARRAY['+'::character varying, '-'::character varying]::text[])),
  thereafter_value numeric,
  minimum_loan_size bigint,
  partial_pay_penalty numeric,
  full_redeem_penalty numeric,
  cancellation_penalty numeric,
  legal_fee_subsidy boolean DEFAULT false,
  valuation_subsidy boolean DEFAULT false,
  partial_repayment boolean DEFAULT false,
  waiver_due_to_sales boolean DEFAULT false,
  remarks text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  buy_under text,
  free_package_conversion_12m boolean DEFAULT false,
  free_package_conversion_24m boolean DEFAULT false,
  free_package_conversion_36m boolean DEFAULT false,
  CONSTRAINT rate_packages_pkey PRIMARY KEY (id)
);
CREATE TABLE public.rate_types (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  rate_type character varying NOT NULL,
  rate_value numeric NOT NULL,
  bank_names ARRAY,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT rate_types_pkey PRIMARY KEY (id)
);


check_user_credentials Function:
BEGIN
    RETURN QUERY
    SELECT 
        u.id,
        u.email,
        u.name,
        u.role,
        (u.password_hash = p_password_hash AND u.is_active = TRUE) as is_valid
    FROM public.admin_users u
    WHERE u.email = p_email;
END;

create_first_super_admin function:
DECLARE
    user_count INTEGER;
BEGIN
    -- Check if there are any users
    SELECT COUNT(*) INTO user_count FROM public.admin_users;
    
    -- Only allow creating first user if no users exist
    IF user_count = 0 THEN
        INSERT INTO public.admin_users (email, name, role, password_hash)
        VALUES (p_email, p_name, 'super_admin', p_password_hash);
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
END;

log_user_action function:
DECLARE
    log_id UUID;
BEGIN
    INSERT INTO public.admin_audit_log (user_id, action, details, ip_address, user_agent)
    VALUES (p_user_id, p_action, p_details, p_ip_address, p_user_agent)
    RETURNING id INTO log_id;
    
    RETURN log_id;
END;

normalize_rate_package_data function:


BEGIN
  -- Normalize lock_period
  IF NEW.lock_period IS NOT NULL THEN
    NEW.lock_period := CASE 
      WHEN LOWER(NEW.lock_period) IN ('0 year', '0year', '0 yr', '0yr', 'none', 'no lock') THEN '0 Year'
      WHEN LOWER(NEW.lock_period) IN ('1 year', '1year', '1 yr', '1yr') THEN '1 Year'
      WHEN LOWER(NEW.lock_period) IN ('2 years', '2year', '2 yrs', '2yr') THEN '2 Years'
      WHEN LOWER(NEW.lock_period) IN ('3 years', '3year', '3 yrs', '3yr') THEN '3 Years'
      WHEN LOWER(NEW.lock_period) IN ('4 years', '4year', '4 yrs', '4yr') THEN '4 Years'
      WHEN LOWER(NEW.lock_period) IN ('5 years', '5year', '5 yrs', '5yr') THEN '5 Years'
      ELSE NEW.lock_period
    END;
  END IF;
  
  -- Normalize buy_under
  IF NEW.buy_under IS NOT NULL THEN
    NEW.buy_under := CASE 
      WHEN LOWER(NEW.buy_under) IN ('individual name', 'individual', 'personal') THEN 'Individual Name'
      WHEN LOWER(NEW.buy_under) IN ('company operating', 'company', 'corporate') THEN 'Company Operating'
      WHEN LOWER(NEW.buy_under) IN ('company investment holding', 'investment holding') THEN 'Company Investment Holding'
      ELSE NEW.buy_under
    END;
  END IF;
  
  -- Normalize property_type
  IF NEW.property_type IS NOT NULL THEN
    NEW.property_type := CASE 
      WHEN LOWER(NEW.property_type) IN ('hdb', 'hdb flat') THEN 'HDB'
      WHEN LOWER(NEW.property_type) IN ('private property', 'private', 'condo', 'condominium') THEN 'Private Property'
      WHEN LOWER(NEW.property_type) IN ('ec', 'executive condo', 'executive condominium') THEN 'EC'
      WHEN LOWER(NEW.property_type) IN ('commercial', 'office', 'retail') THEN 'Commercial'
      WHEN LOWER(NEW.property_type) IN ('industrial', 'factory', 'warehouse') THEN 'Industrial'
      ELSE NEW.property_type
    END;
  END IF;
  
  -- Normalize property_status
  IF NEW.property_status IS NOT NULL THEN
    NEW.property_status := CASE 
      WHEN LOWER(NEW.property_status) IN ('completed', 'ready', 'existing', 'resale') THEN 'Completed'
      WHEN LOWER(NEW.property_status) IN ('under construction', 'uc', 'new launch', 'bto') THEN 'Under Construction'
      ELSE NEW.property_status
    END;
  END IF;
  
  RETURN NEW;
END;

record_failed_login function:

BEGIN
    UPDATE public.admin_users 
    SET 
        failed_login_attempts = COALESCE(failed_login_attempts, 0) + 1,
        locked_until = CASE 
            WHEN COALESCE(failed_login_attempts, 0) + 1 >= 5 
            THEN NOW() + INTERVAL '15 minutes'
            ELSE locked_until
        END
    WHERE email = p_email;
END;


update_last_login

BEGIN
    UPDATE public.admin_users 
    SET 
        last_login = NOW(),
        failed_login_attempts = 0,
        locked_until = NULL
    WHERE id = p_user_id;
END;

update_updated_at_column function

BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;



